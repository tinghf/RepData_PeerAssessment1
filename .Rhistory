y <- x
}
if (all(y > 100)) {
## subtract 100
y <- y - 100
}
res <- x^y
return(res)
}
library(RUnit)
## define sample functions to be tested
foo <- function(x) {
x <- x*x
x <- 2*x
return(x)
}
test.foo <- function() {
checkTrue(is.numeric(foo(1:10)))
checkEquals(length(foo(1:10)), 10)
checkEqualsNumeric(foo(1), 2)
}
bar <- function(x, y=NULL) {
if (is.null(y)) {
y <- x
}
if (all(y > 100)) {
## subtract 100
y <- y - 100
}
res <- x^y
return(res)
}
track <- tracker(); ## initialize a tracking "object"
track$init(); ## initialize the tracker
a <- 1:10
d <- seq(0,1,0.1)
resFoo <- inspect(foo(a), track=track); ## execute the test function and track
resBar <- inspect(bar(d), track=track); ## execute the test function and track
resTrack <- track$getTrackInfo(); ## get the result of Code Inspector (a list)
printHTML.trackInfo(resTrack) ; ## create HTML sites
a
d
track
resFoo
resBar
foo(2)
foo(2)
printHTML.trackInfo(resTrack) ; ## create HTML sites
getwd()
resTrack
install.packages("Xml")
install.packages("XML")
library(XML)
a <- xmlNode("arg", attrs = c(default="T"), xmlNode("name", "foo"))
a
print (a)
ntest <- 2; a <- XmlNode("testsuite", attrs = c(tests="n"), xmlNode("testcase")
)
ntest <- 2; a <- XmlNode("testsuite", attrs = c(tests="n"), xmlNode("testcase", attrs = c(classname="foo", "name="testname1")), xmlNode("testcase"))
a <- XmlNode("testsuite", attrs = c(tests="n"),
xmlNode("testcase", attrs = c(classname="foo", "name="testname1")),
xmlNode("testcase")
)
?xmlNode
a <- XmlNode("testsuite", attrs = c(tests="n"),
xmlNode("testcase", attrs = c(classname="foo", "name="testname1"))
)
xmlNode("testcase", attrs = c(classname="foo", "name="testname1"))
xmlNode("testcase", attrs = c(classname="foo", name="testname1"))
a <- XmlNode("testsuite", attrs = c(tests="n"),
xmlNode("testcase", attrs = c(classname="foo", name="testname1"))
)
a <- XmlNode("testsuite", attrs = c(tests="n"),
XmlNode("testcase", attrs = c(classname="foo", name="testname1"))
)
a <- xmlNode("testsuite", attrs = c(tests="n"),
xmlNode("testcase", attrs = c(classname="foo", name="testname1"))
)
a
a <- xmlNode("testsuite", attrs = c(tests="n"),
xmlNode("testcase", attrs = c(classname="foo", name="testname1")),
)
a <- xmlNode("testsuite", attrs = c(tests="n"),
xmlNode("testcase", attrs = c(classname="foo", name="testname1")), xmlNode("testcase", attrs = c(classname="foo", name="testname1"))
)
a
listtests <- c( xmlNode("testcase", attrs = c(classname="foo", name="testname1")), xmlNode("testcase", attrs = c(classname="foo", name="testname1")), xmlNode("testcase", attrs = c(classname="foo", name="testname1")))
testsuite <- xmlNode("testsuite", attrs=c(tests="n"), listtests)
testsuite
listtests
testsuite <- xmlNode("testsuite", attrs=c(tests="n"), .children=listtests)
testsuite
listtests
listtests <- c( xmlNode("testcase", attrs = c(classname="foo", name="testname1")), xmlNode("testcase", attrs = c(classname="foo", name="testname1")), xmlNode("testcase", attrs = c(classname="foo", name="testname1")))
listtests
doc = newXMLDoc()
# Simple creation of an XML tree using these functions
top = newXMLNode("a")
newXMLNode("b", attrs = c(x = 1, y = 'abc'), parent = top)
newXMLNode("c", "With some text", parent = top)
d = newXMLNode("d", newXMLTextNode("With text as an explicit node"), parent = top)
newXMLCDataNode("x <- 1\n x > 2", parent = d)
newXMLPINode("R", "library(XML)", top)
newXMLCommentNode("This is a comment", parent = top)
o = newXMLNode("ol", parent = top)
kids = lapply(letters[1:3],
function(x)
newXMLNode("li", x))
addChildren(o, kids)
cat(saveXML(top))
top
str(top)
top$b
top$b
d
d$attrs=c(x=1, y='abc')
x <- 1:10
x
format( x "~:d")
paste(x, collapse=",")
top
newXMLNode("b", attrs = c(x = 1, y = 'abc'), parent = top)
top
source('~/testxmlgen.R')
source('~/testxmlgen.R')
alpha = 0.05
z = qnorm(1 - alpha)
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
mu0 <- 30
mua <- 32
sigma <- 4
n <_ 16
n <- 16
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
z <- qnorm(1- alpha)
alpha
z
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
pnorm(mu0 + z * sigma/sqrt(n), mean = mu0, sd = sigma/sqrt(n), lower.tail = FALSE)
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
?seq
mua <- seq(30, 35, 0.5)
mua
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
x <- 4:15
x^2
n <- x^2
mua <- 32
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
n <- 16
mua <- seq(30, 35, 0.5)
power <- pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
plot(power ~ mua)
n <- 10
plot(power ~ mua)
power <- pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
plot(power ~ mua)
n <- 128
power <- pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
plot(power ~ mua)
library(manipulate)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,
sd = sigma/sqrt(n)), size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,
sd = sigma/sqrt(n)), size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
library(ggplo2)
library(ggplot2)
library(ggplot2)
library(manipulate)
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
power.t.test(n = 16, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")$power
power.t.test(power=0.8, delta = 0.5, sd=1, type= "one.sample, alt="one.sided")$n
power.t.test(power=0.8, delta = 0.5, sd=1, type= "one.sample", alt="one.sided")$n
power.t.test(power=0.8, delta = 5, sd=10, type= "one.sample", alt="one.sided")$n
round(power.t.test(power=0.8, delta = 5, sd=10, type= "one.sample", alt="one.sided")$n)
ceiling(power.t.test(power=0.8, delta = 5, sd=10, type= "one.sample", alt="one.sided")$n)
floor(power.t.test(power=0.8, delta = 5, sd=10, type= "one.sample", alt="one.sided")$n)
power.t.test(power=0.8, n = 50, sd=10, type= "one.sample", alt="one.sided")$delta
power.t.test(power=0.8, n = 100, sd=10, type= "one.sample", alt="one.sided")$delta
library(UsingR)
data(father.son)
x <- father.son$sheight
n <- length(x)
B <- 10000
n
resamples <- matrix(sample(x, n *B, replace=T), B, n)
head(resamples)
nrow(resamples)
ncol(resamples)
medians <- apply(resamples, 1, median)
sd(medians)
quantile(medians, c(0.025, 0.975))
hist(medians)
data(InsectSprays)
boxplot(count ~ spray, data = InsectSprays)
head(Insectsprays)
head(InsectSprays)
length(InsectSprays)
nrow(InsectSprays)
subdata <- InsectSprays[InsectSprays$spray %in% c("B", "C"), ]
y <- subdata$count
y
head(subdata, 20)
group <- as.character(subdata$spray)
cbind(subdata, group)
head(subdata, 20)
nrow(subdata)
subdata
testStat <- function(w, g) mean(w[g == "B"]) - mean(w[g == "C"])
observedStat <- testStat(y, group)
permutations <- sapply(1:10000, function(i) testStat(y, sample(group)))
observedStat
permutations
mean(permutations > observedStat)
require(graphics)
## Examples from Venables & Ripley
acf(lh)
acf(lh, type = "covariance")
pacf(lh)
?acf
?lh
str(lh)
acf(lh, type="covariance")
plot(lh)
?acf
decompose(lh)
install.packages("ggmap")
library(ggmap)
lon <- c(-38.31,-35.5)
lat <- c(40.96, 37.5)
df <- as.data.frame(cbind(lon,lat))
df
mapgilbert <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 4,
maptype = "satellite", scale = 2)
ggmap(mapgilbert) +
geom_point(data = df, aes(x = lon, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
getwd()
sessionInfo()
install.packages(c("mapproj", "maps"))
install.packages(c("mapproj", "maps"))
library(ggmap)
lon <- c(-38.31,-35.5)
lat <- c(40.96, 37.5)
df <- as.data.frame(cbind(lon,lat))
df
mapgilbert <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 4,
maptype = "satellite", scale = 2)
ggmap(mapgilbert) +
geom_point(data = df, aes(x = lon, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
install.packages(c("mapproj", "maps"))
install.packages("ggmap")
library(ggmap)
lon <- c(-38.31,-35.5)
lat <- c(40.96, 37.5)
df <- as.data.frame(cbind(lon,lat))
df
mapgilbert <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 4,
maptype = "satellite", scale = 2)
ggmap(mapgilbert) +
geom_point(data = df, aes(x = lon, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
gmap <- ggmap(mapgilbert) +
geom_point(data = df, aes(x = lon, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
gmap
print(gmap)
gmap
myLocation <- "University of Washington”
""
""
myLocation <- "University of Washington"
geocode("University of Washington")
myMap <- get_map(location=myLocation,
source="stamen", maptype=“watercolor", crop=FALSE)
ggmap(myMap)
myMap <- get_map(location=myLocation, source="stamen", maptype="watercolor", crop=FALSE)
qmap("new-york", zoom=13, source="stamen", maptype="watercolor")
get_stamenmap
library(jpeg)
source('~/file_drawer.R')
source('~/get_stamenmap.R')
qmap("new-york", zoom=13, source="stamen", maptype="watercolor")
?stopifnot
get_stamenmap
qmap
qmap("new-york", zoom=13, source="stamen", maptype="watercolor")
ggmap(mapgilbert)
dev.off()
ggmap(mapgilbert)
library(ggmap)
map <- get_map(location = 'Europe', zoom = 4)
ggmap(map)
mapImageData3 <- get_map(location = c(lon = -0.016179, lat = 51.538525),
color = "color",
source = "google",
maptype = "roadmap",
zoom = 16)
ggmap(mapImageData3,
extent = "device",
ylab = "Latitude",
xlab = "Longitude")
mapImageData3 <- get_map(location = c(lon = -0.016179, lat = 51.538525),
color = "color",
source = "google",
maptype = "roadmap",
zoom = 16)
ggmap(mapImageData3,
extent = "device",
ylab = "Latitude",
xlab = "Longitude")
sessionInfo()
capabilities()
library(lattice)
Cl <- cor(longley)
CL
Cl
levelplot(Cl)
head(longley)
nrow(longley)
longley
typeof(longley)
str(longley)
seq(-4, 4, length=100)
x <- seq(-4, 4, length=100)
?dnorm
hx <- dnorm(x)
hx
plot(x, hx)
x=rnorm(100,1,0.8)
x
plot(density(x), ylim=c(0,1))
plot(density(x))
plot(density(rnorm(1000, 1, 0.8)))
plot(density(rnorm(5000, 1, 0.8)))
plot(density(rnorm(50000, 1, 0.8)))
plot(density(rnorm(500000, 1, 0.8)))
plot(density(rnorm(1000000, 1, 0.8)))
plot(density(rnorm(10000, 1, 0.8)))
df
pharm <- data.frame(baseline = c(140, 138, 150, 148, 135),
week2 = c(132, 135, 151, 146, 130))
t.test(pharm$baseline, pharm$week2, alternative = "two.sided", paired = T)
n <- 9
mu <- 1100
sd <- 30
alpha <- .05
tstat <- qt(1 - alpha/2, n - 1)
mu + c(-1, 1)*tstat*sd / sqrt(n) # 1076.94 1123.06
?qt
library(stats)
binom.test(x = 3, n = 4, p = .5, alt = "greater") # p-value = 0.3125
p <- 1 / 100
pr <- 10 / 1787
n <- 1787
serror <- sqrt(p * (1-p) / n)
z <- (p-pr) / serror
pnorm(z, lower.tail = F)
n1 <- 9
n2 <- 9
df <- n1 + n2 - 2
meanTreat <- -3
meanPlacebo <- 1
sdTreat <- 1.5
sdPlacebo <- 1.8
pooledVar <- (sdTreat^2 * n1 + sdPlacebo^2 * n2)/df
se.diff <- sqrt(pooledVar/n1 + pooledVar/n2)
tstat <- (meanTreat - meanPlacebo) / se.diff
tstat
pValue <- 2 * pt(tstat, df = df)
pvalue
pValue
n <- 100
mu <- .01
sd <- .04
power.t.test(n, delta = mu, sd = sd, type = "one.sample", alt = "one.sided")$power # 0.7989855
power <- .9
power.t.test(power = power, delta = mu, sd = sd, type = "one.sample", alt = "one.sided")$n # 138.3856
m <- 10
alpha <- .05
alphaFwer <- alpha / m
alphaFwer
insta.packages("rJava")
install.packages("rJava")
library(rJava)
.jinit() # this starts the JVM
s <- .jnew("java/lang/String", "Hello World!")
s
strA(s)
str(s)
summary(s)
.jcall(s,"I","length")
.jcall(s,"Ljava/lang/String;","concat",s)
print(s)
.jstrVal(s)
f <- .jnew("java/awt/Frame", "Hello")
b <- .jnew("java/awt/Button", "OK")
.jcall(f, "Ljava/awt/Component;", "add", .jcast(b, "java/awt/Component"))
.jcall(f,, "pack")
.jcall(f,, "setVisible", TRUE)
.jcall(f,,"dispose").
.jcall(f,,"dispose")
getwd()
sessionInfo()
crime
murder <- subset(crime, offense == "murder")
qmplot(lon, lat, data = murder, colour = I(’red’), size = I(3), darken = .3)
qmplot
qmplot(lon, lat, data = murder, colour = I(’red’), size = I(3), darken = .3)
I('red')
qmplot(lon, lat, data = murder, colour = I('red'), size = I(3), darken = .3)
get_stamenmap
source('~/get_stamenmap.R')
qmplot(lon, lat, data = murder, colour = I('red'), size = I(3), darken = .3)
qmplot(lon, lat, data = murder, colour = I('red'), size = I(3), darken = .3, maptype="watercolor")
?qmplot
getwd()
readPNG("ggmapTemp.png")
? readPNG
library(png)
img <- readPNG("ggmapTemp.png")
img <- readJPEG("ggmapTemp.png")
rasterImage(img)
rasterImage(img), 0, 0, 0, 0
rasterImage(img, 0, 0, 0, 0)
rasterImage(img, 0, 0, 0, 0)
rimg <- rasterImage(img, 0, 0, 0, 0)
print (rimg)
rimg
?rasterImage
rasterImage(img, 0, 0, 2, 2)
rasterImage(img, 0, 0, 20, 20)
rasterImage(img, 0, 0, 200, 200)
qmplot(lon, lat, data = murder, colour = I('red'), size = I(3), darken = .3, maptype="watercolor1")
qmplot(lon, lat, data = murder, colour = I('red'), size = I(3), darken = .3, maptype="watercolor")
?qmplot
qmplot
summary(s100)
library(geoR)
summary(s100)
plot(s100)
head(s100)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
z <- x*w
z
weighted.mean(x, w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit.origin <- lm( y ~ x - 1 )
summary(fit.origin)
?lm
lm(y~ 0 + x)
data(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
m.x <- mean(x)
sd.x <- sd(x)
(x[1] - m.x)/sd.x
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm( y ~ x )
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x<-mtcars$wt
y<-mtcars$mpg
coef(lm(y~x))[2
]
lm(y~x)
x<-mtcars$wt
y<-mtcars$mpg
coef(lm(y~x))[2]/coef(lm(x~y))[2]
var(y)/var(x)
data(animals)
install.packages("cluster")
library(cluster)
?mona
data(animals)
head(animals)
head(animals, 20)
ma <- mona(animals)
ma
plot(ma)
?scale
library(NbClust)
?kmeans
sessionInfo()
data(animals)
mtcars
plotmatrix(mtcars)
sessionInfo()
library(ggplot2)
plotmatrix(mtcars)
library(GGally)
plotmatrix(mtcars)
ggpairs(mtcars)
setwd("F:/GitRepos/RepData_PeerAssessment1")
install.packages("caTools")
